--- Kernel/drivers/gpu/pvr/dbgdrv/hostfunc.c
+++ Kernel/drivers/gpu/pvr/dbgdrv/hostfunc.c
@@ -1,6 +1,6 @@
 /**********************************************************************
  *
- * Copyright(c) 2008 Imagination Technologies Ltd. All rights reserved.
+ * Copyright (C) Imagination Technologies Ltd. All rights reserved.
  * 
  * This program is free software; you can redistribute it and/or modify it
  * under the terms and conditions of the GNU General Public License,
@@ -29,6 +29,7 @@
 #include <linux/module.h>
 #include <linux/fs.h>
 #include <linux/kernel.h>
+#include <linux/slab.h>
 #include <linux/mm.h>
 #include <linux/string.h>
 #include <asm/page.h>
@@ -54,7 +55,7 @@
 #include "hostfunc.h"
 #include "dbgdriv.h"
 
-#if defined(DEBUG) && !defined(SUPPORT_DRI_DRM)
+#if defined(MODULE) && defined(DEBUG) && !defined(SUPPORT_DRI_DRM)
 IMG_UINT32	gPVRDebugLevel = (DBGPRIV_FATAL | DBGPRIV_ERROR | DBGPRIV_WARNING);
 
 #define PVR_STRING_TERMINATOR		'\0'
@@ -85,9 +86,15 @@
 	if (gPVRDebugLevel & ui32DebugLevel)
 	{
 		va_list vaArgs;
-		static char szBuffer[256];
+		char szBuffer[256];
+		char *szBufferEnd = szBuffer;
+		char *szBufferLimit = szBuffer + sizeof(szBuffer) - 1;
 
-		va_start (vaArgs, pszFormat);
+		
+		*szBufferLimit = '\0';
+
+		snprintf(szBufferEnd, szBufferLimit - szBufferEnd, "PVR_K:");
+		szBufferEnd += strlen(szBufferEnd);
 
 		
 		if (bTrace == IMG_FALSE)
@@ -96,52 +103,54 @@
 			{
 				case DBGPRIV_FATAL:
 				{
-					strcpy (szBuffer, "PVR_K:(Fatal): ");
+					snprintf(szBufferEnd, szBufferLimit - szBufferEnd, "(Fatal):");
 					break;
 				}
 				case DBGPRIV_ERROR:
 				{
-					strcpy (szBuffer, "PVR_K:(Error): ");
+					snprintf(szBufferEnd, szBufferLimit - szBufferEnd, "(Error):");
 					break;
 				}
 				case DBGPRIV_WARNING:
 				{
-					strcpy (szBuffer, "PVR_K:(Warning): ");
+					snprintf(szBufferEnd, szBufferLimit - szBufferEnd, "(Warning):");
 					break;
 				}
 				case DBGPRIV_MESSAGE:
 				{
-					strcpy (szBuffer, "PVR_K:(Message): ");
+					snprintf(szBufferEnd, szBufferLimit - szBufferEnd, "(Message):");
 					break;
 				}
 				case DBGPRIV_VERBOSE:
 				{
-					strcpy (szBuffer, "PVR_K:(Verbose): ");
+					snprintf(szBufferEnd, szBufferLimit - szBufferEnd, "(Verbose):");
 					break;
 				}
 				default:
 				{
-					strcpy (szBuffer, "PVR_K:(Unknown message level)");
+					snprintf(szBufferEnd, szBufferLimit - szBufferEnd, "(Unknown message level)");
 					break;
 				}
 			}
+			szBufferEnd += strlen(szBufferEnd);
 		}
-		else
-		{
-			strcpy (szBuffer, "PVR_K: ");
-		}
+		snprintf(szBufferEnd, szBufferLimit - szBufferEnd, " ");
+		szBufferEnd += strlen(szBufferEnd);
 
-		vsprintf (&szBuffer[strlen(szBuffer)], pszFormat, vaArgs);
+		va_start (vaArgs, pszFormat);
+		vsnprintf(szBufferEnd, szBufferLimit - szBufferEnd, pszFormat, vaArgs);
+		va_end (vaArgs);
+		szBufferEnd += strlen(szBufferEnd);
 
  		
  		if (bTrace == IMG_FALSE)
 		{
-			sprintf (&szBuffer[strlen(szBuffer)], " [%d, %s]", (int)ui32Line, pszFileName);
+			snprintf(szBufferEnd, szBufferLimit - szBufferEnd, 
+			         " [%d, %s]", (int)ui32Line, pszFileName);
+			szBufferEnd += strlen(szBufferEnd);
 		}
 
 		printk(KERN_INFO "%s\r\n", szBuffer);
-
-		va_end (vaArgs);
 	}
 }
 #endif	
@@ -210,17 +219,31 @@
     
 }
 
-IMG_VOID * HostCreateMutex(IMG_VOID)
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,37))
+typedef	struct mutex		MUTEX;
+#define	INIT_MUTEX(m)		mutex_init(m)
+#define	DOWN_TRYLOCK(m)		(!mutex_trylock(m))
+#define	DOWN(m)			mutex_lock(m)
+#define UP(m)			mutex_unlock(m)
+#else
+typedef	struct semaphore	MUTEX;
+#define	INIT_MUTEX(m)		init_MUTEX(m)
+#define	DOWN_TRYLOCK(m)		down_trylock(m)
+#define	DOWN(m)			down(m)
+#define UP(m)			up(m)
+#endif
+
+IMG_VOID *HostCreateMutex(IMG_VOID)
 {
-	struct semaphore *psSem;
+	MUTEX *psMutex;
 
-	psSem = kmalloc(sizeof(*psSem), GFP_KERNEL);
-	if (psSem)
+	psMutex = kmalloc(sizeof(*psMutex), GFP_KERNEL);
+	if (psMutex)
 	{
-		init_MUTEX(psSem);
+		INIT_MUTEX(psMutex);
 	}
 
-	return psSem;
+	return psMutex;
 }
 
 IMG_VOID HostAquireMutex(IMG_VOID * pvMutex)
@@ -228,19 +251,19 @@
 	BUG_ON(in_interrupt());
 
 #if defined(PVR_DEBUG_DBGDRV_DETECT_HOST_MUTEX_COLLISIONS)
-	if (down_trylock((struct semaphore *)pvMutex))
+	if (DOWN_TRYLOCK((MUTEX *)pvMutex))
 	{
 		printk(KERN_INFO "HostAquireMutex: Waiting for mutex\n");
-		down((struct semaphore *)pvMutex);
+		DOWN((MUTEX *)pvMutex);
 	}
 #else
-	down((struct semaphore *)pvMutex);
+	DOWN((MUTEX *)pvMutex);
 #endif
 }
 
 IMG_VOID HostReleaseMutex(IMG_VOID * pvMutex)
 {
-	up((struct semaphore *)pvMutex);
+	UP((MUTEX *)pvMutex);
 }
 
 IMG_VOID HostDestroyMutex(IMG_VOID * pvMutex)
