--- Kernel/drivers/gpu/pvr/mem_debug.c
+++ Kernel/drivers/gpu/pvr/mem_debug.c
@@ -1,6 +1,6 @@
 /**********************************************************************
  *
- * Copyright(c) 2008 Imagination Technologies Ltd. All rights reserved.
+ * Copyright (C) Imagination Technologies Ltd. All rights reserved.
  * 
  * This program is free software; you can redistribute it and/or modify it
  * under the terms and conditions of the GNU General Public License,
@@ -41,12 +41,8 @@
 
 	
 
-	
 
 
-//2011.3.2
-//don't check data corruption	
-/*
 
 
 	IMG_BOOL MemCheck(const IMG_PVOID pvAddr, const IMG_UINT8 ui8Pattern, IMG_SIZE_T uSize)
@@ -153,7 +149,7 @@
 		}
 	}
 
-static	IMG_VOID debug_strcpy(IMG_CHAR *pDest, const IMG_CHAR *pSrc)
+	IMG_VOID debug_strcpy(IMG_CHAR *pDest, const IMG_CHAR *pSrc)
 	{
 		IMG_SIZE_T i = 0;
 
@@ -166,7 +162,6 @@
 		}
 	}
 
-*/
 	PVRSRV_ERROR OSAllocMem_Debug_Wrapper(IMG_UINT32 ui32Flags,
 										  IMG_UINT32 ui32Size,
 										  IMG_PVOID *ppvCpuVAddr,
@@ -190,18 +185,14 @@
 			return eError;
 		}
 
-//2011.3.2
-//don't add data pattern
-	
-//		OSMemSet((IMG_CHAR *)(*ppvCpuVAddr) + TEST_BUFFER_PADDING_STATUS, 0xBB, ui32Size);
-//		OSMemSet((IMG_CHAR *)(*ppvCpuVAddr) + ui32Size + TEST_BUFFER_PADDING_STATUS, 0xB2, TEST_BUFFER_PADDING_AFTER);
-		
+		OSMemSet((IMG_CHAR *)(*ppvCpuVAddr) + TEST_BUFFER_PADDING_STATUS, 0xBB, ui32Size);
+		OSMemSet((IMG_CHAR *)(*ppvCpuVAddr) + ui32Size + TEST_BUFFER_PADDING_STATUS, 0xB2, TEST_BUFFER_PADDING_AFTER);
 
 		
 		psInfo = (OSMEM_DEBUG_INFO *)(*ppvCpuVAddr);
 
 		OSMemSet(psInfo->sGuardRegionBefore, 0xB1, sizeof(psInfo->sGuardRegionBefore));
-	//	debug_strcpy(psInfo->sFileName, pszFilename);
+		debug_strcpy(psInfo->sFileName, pszFilename);
 		psInfo->uLineNo = ui32Line;
 		psInfo->eValid = isAllocated;
 		psInfo->uSize = ui32Size;
@@ -227,13 +218,11 @@
 	{
 		OSMEM_DEBUG_INFO *psInfo;
 
-//2011.3.2
-//don't check data corruption		
-
-//		OSCheckMemDebug(pvCpuVAddr, ui32Size, pszFilename, ui32Line);
+		
+		OSCheckMemDebug(pvCpuVAddr, ui32Size, pszFilename, ui32Line);
 
 		
-//		OSMemSet(pvCpuVAddr, 0xBF, ui32Size + TEST_BUFFER_PADDING_AFTER); 		
+		OSMemSet(pvCpuVAddr, 0xBF, ui32Size + TEST_BUFFER_PADDING_AFTER);  
 
 		
 		psInfo = (OSMEM_DEBUG_INFO *)((IMG_UINT32) pvCpuVAddr - TEST_BUFFER_PADDING_STATUS);
@@ -243,7 +232,7 @@
 		psInfo->uSizeParityCheck = 0;
 		psInfo->eValid = isFree;
 		psInfo->uLineNo = ui32Line;
-//		debug_strcpy(psInfo->sFileName, pszFilename);
+		debug_strcpy(psInfo->sFileName, pszFilename);
 
 		return OSFreeMem_Debug_Linux_Memory_Allocations(ui32Flags, ui32Size + TEST_BUFFER_PADDING, psInfo, hBlockAlloc, pszFilename, ui32Line);
 	}
@@ -255,4 +244,4 @@
 
 #endif 
 
-#endif        
+#endif 
